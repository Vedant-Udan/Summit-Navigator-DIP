import cv2
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from main import *
from sklearn.metrics import mean_squared_error
from skimage.metrics import peak_signal_noise_ratio

def calculate_mse(image1, image2):
    """Calculate Mean Squared Error (MSE) between two images."""
    return mean_squared_error(image1.flatten(), image2.flatten())

def calculate_psnr(image1, image2):
    """Calculate Peak Signal-to-Noise Ratio (PSNR) between two images."""
    return peak_signal_noise_ratio(image1, image2, data_range=image1.max() - image1.min())

def compare_results(original_image, transformed_image, reference_image):
    """
    Compare our method's result with another (reference) method.
    - Compute metrics like MSE and PSNR.
    - Plot comparison visualizations.
    """
    mse_ours = calculate_mse(original_image, transformed_image)
    psnr_ours = calculate_psnr(original_image, transformed_image)

    mse_reference = calculate_mse(original_image, reference_image)
    psnr_reference = calculate_psnr(original_image, reference_image)

    # Metrics Table
    metrics = pd.DataFrame({
        "Metric": ["MSE", "PSNR"],
        "Our Method": [mse_ours, psnr_ours],
        "Reference Method": [mse_reference, psnr_reference]
    })
    print("\nComparison Metrics:")
    print(metrics)

    # Display images side-by-side
    fig, axs = plt.subplots(1, 3, figsize=(15, 5))
    axs[0].imshow(original_image, cmap='gray')
    axs[0].set_title("Original Image")
    axs[0].axis("off")

    axs[1].imshow(transformed_image, cmap='gray')
    axs[1].set_title("Our Method")
    axs[1].axis("off")

    axs[2].imshow(reference_image, cmap='gray')
    axs[2].set_title("Reference Method")
    axs[2].axis("off")

    plt.tight_layout()
    plt.show()

    return metrics

def plot_histogram_comparison(original_hist, our_hist, reference_hist):
    """
    Plot histograms of original, our processed, and reference images for comparison.
    """
    bins = np.arange(256)

    plt.figure(figsize=(10, 6))
    plt.plot(bins, original_hist, label="Original Image", color="blue")
    plt.plot(bins, our_hist, label="Our Method", color="green")
    plt.plot(bins, reference_hist, label="Reference Method", color="red")
    plt.title("Histogram Comparison")
    plt.xlabel("Pixel Intensity")
    plt.ylabel("Frequency")
    plt.legend()
    plt.grid()
    plt.show()

def main():
    # Load images (our processed result and a reference result)
    original_filename = input("Enter original image file path: ")
    reference_filename = input("Enter reference method result file path: ")

    original_image = getImage(original_filename)
    transformed_image = output_image  # Already generated by our method
    reference_image = getImage(reference_filename)

    # Compare results
    metrics = compare_results(original_image, transformed_image, reference_image)

    # Calculate histograms
    original_hist, _ = getHistogram(original_image)
    our_hist, _ = getHistogram(transformed_image)
    reference_hist, _ = getHistogram(reference_image)

    # Plot histogram comparison
    plot_histogram_comparison(original_hist, our_hist, reference_hist)

    # Save metrics table as CSV
    metrics.to_csv("comparison_metrics.csv", index=False)
    print("Metrics saved to 'comparison_metrics.csv'.")

if __name__ == "__main__":
    main()
